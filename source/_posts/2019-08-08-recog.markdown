---
layout:     post
title:      "AR探索-camera动态图像识别"
date:       2019-08-08 03:00:00
author:     "Huailiang"
tags:
    - 前端开发
    - OpenGL
    - OpenCV
    - C++
---



> 接着上节继续， 上节使用了一个特制的maker（印有方块的标记）。 现实生活中，这种标记都是不存在的，这里通过算法对现实世界的图像进行特征提取，生成特有的标记， 从而实现了从基于标记到AR转移到无标记的AR。可采用无标记AR的几个例子： 杂志封面，公司标志、玩具等。无标记AR计算量很大， 所以移动设备往往不能确保流畅的FPS。 

在实现过程主要分为两步：

```
1. 使用关联图片创建一个marker

2. 和新图片匹配
```

## 生成marker


首先，使用选择手机相册里的图片，根据UIImagePickerController的回调内容，把数据传递给OpenGL. Opengl在screen右下角画出选择的image， 就像之前在glfw里显示shadowmap一样。

获取UIImagePickerController的回调， 你需要在代码注册protocol，类似这样:

{% highlight oc %}
@interface AlbumSource() <UINavigationControllerDelegate, UIImagePickerControllerDelegate>
{}

-(void)imagePickerControllerDidCancel:(UIImagePickerController *)picker;

-(void)imagePickerController:(UIImagePickerController *)picker
 didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info;

@end

{% endhighlight %}



使用OpenGL画选择的图片就更简单了。 render 一张texture， 绑定一张mesh， mesh的uv放在右下角：

```cpp
// generate a texture
glGenTextures(1, &texID);
glBindTexture(GL_TEXTURE_2D, texID);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

// render the texture
glBindTexture(GL_TEXTURE_2D, texID);
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, x, y, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
```

同时传递给cv, 生成关键点和descriptor, 后面使用匹配算法会用到这两个变量：

```cpp
cv::Mat image(x, y, CV_8UC4, data);
cornerDetector = cv::ORB::create(750);
cornerDetector->detectAndCompute(image, 
  cv::noArray(), 
  referenceKeypoints, 
  referenceDescriptors);
```

图像的特征点可以简单的理解为图像中比较显著显著的点，如轮廓点，较暗区域中的亮点，较亮区域中的暗点等。ORB采用FAST（features from accelerated segment test）算法来检测特征点。这个定义基于特征点周围的图像灰度值，检测候选特征点周围一圈的像素值，如果候选点周围领域内有足够多的像素点与该候选点的灰度值差别够大，则认为该候选点为一个特征点。


$$ N =  \sum_{x∀(circle(p))}| I_x - I_p | > \xi_d $$

为了获得更快的结果，还采用了额外的加速办法。如果测试了候选点周围每隔90度角的4个点，应该至少有3个和候选点的灰度值差足够大，否则则不用再计算其他点，直接认为该候选点不是特征点。候选点周围的圆的选取半径是一个很重要的参数，这里为了简单高效，采用半径为3，共有16个周边像素需要比较。为了提高比较的效率，通常只使用N个周边像素来比较，也就是大家经常说的FAST-N.


<center><img src="/img/post-vr/vr1.png" /></center><br><br>



#### BRIEF特征描述子


得到特征点后我们需要以某种方式描述这些特征点的属性。这些属性的输出我们称之为该特征点的描述子（Feature DescritorS）.ORB采用BRIEF算法来计算一个特征点的描述子。
BRIEF算法的核心思想是在关键点P的周围以一定模式选取N个点对，把这N个点对的比较结果组合起来作为描述子。

<center><img src="/img/post-vr/vr9.png" /></center><br><br>

步骤：
1.以关键点P为圆心，以d为半径做圆O。
2.在圆O内某一模式选取N个点对。这里为方便说明，N=4，实际应用中N可以取512.
假设当前选取的4个点对如上图所示分别标记为：


算法步骤如下：

1.以关键点P为圆心，以d为半径做圆O。

2.在圆O内某一模式选取N个点对。这里为方便说明，N=4，实际应用中N可以取512. 假设当前选取的4个点对如上图所示分别标记为：

$$  P_1(A,B)、 P_2(A,B)、 P_3(A,B)、 P_4(A,B) $$

3.定义操作 $$\tau$$

$$
\tau(p(A,B))=
\begin{cases}
0& {I_A<I_B}\\
1& {I_A>I_B}
\end{cases}
$$

其中$$ I_A $$ 表示点A的灰度


4.分别对已选取的点对进行T操作，将得到的结果进行组合。 假如：

$$
\tau(p_1(A,B)) = 1 \\
\tau(p_2(A,B)) = 0 \\
\tau(p_3(A,B)) = 1 \\
\tau(p_4(A,B)) = 1 \\
$$

则最终的描述子为：1011


#### 理想的特征点描述子应该具备的属性：

在现实生活中，我们从不同的距离，不同的方向、角度，不同的光照条件下观察一个物体时，物体的大小，形状，明暗都会有所不同。但我们的大脑依然可以判断它是同一件物体。理想的特征描述子应该具备这些性质。即，在大小、方向、明暗不同的图像中，同一特征点应具有足够相似的描述子，称之为描述子的可复现性。

当以某种理想的方式分别计算描述子时，应该得出同样的结果。即描述子应该对光照（亮度）不敏感，具备尺度一致性（大小 ），旋转一致性（角度）等。

ORB并没有解决尺度一致性问题，在OpenCV的ORB实现中采用了图像金字塔来改善这方面的性能。ORB主要解决BRIEF描述子不具备旋转不变性的问题。

在当前关键点P周围以一定模式选取N个点对，组合这N个点对的T操作的结果就为最终的描述子。当我们选取点对的时候，是以当前关键点为原点，以水平方向为X轴，以垂直方向为Y轴建立坐标系。当图片发生旋转时，坐标系不变，同样的取点模式取出来的点却不一样，计算得到的描述子也不一样，这是不符合我们要求的。因此我们需要重新建立坐标系，使新的坐标系可以跟随图片的旋转而旋转。这样我们以相同的取点模式取出来的点将具有一致性。


ORB在计算BRIEF描述子时建立的坐标系是以关键点为圆心，以关键点和取点区域的形心的连线为X轴建立2维坐标系。

<center><img src="/img/post-vr/vr10.png" /></center><br><br>

我们知道圆心是固定的而且随着物体的旋转而旋转。当我们以PQ作为坐标轴时，在不同的旋转角度下，我们以同一取点模式取出来的点是一致的。这就解决了旋转一致性的问题。

## 匹配图片

#### 利用BRIEF特征进行配准

汉明距离：

汉明距离是以理查德•卫斯里•汉明的名字命名的。在信息论中，两个等长字符串之间的汉明距离是两个字符串对应位置的不同字符的个数。换句话说，它就是将一个字符串变换成另外一个字符串所需要替换的字符个数。例如：
1011101 与 1001001 之间的汉明距离是 2。
2143896 与 2233796 之间的汉明距离是 3。
"toned" 与 "roses" 之间的汉明距离是 3。
给予两个任何的字码，10001001和10110001，即可决定有多少个相对位是不一样的。在此例中，有三个位不同。要决定有多少个位不同，只需将xor运算加诸于两个字码就可以，并在结果中计算有多个为1的位。例如：
10001001
Xor 10110001
00111000
两个字码中不同位值的数目称为汉明距离(Hamming distance) 。


特征点的匹配
ORB算法最大的特点就是计算速度快 。 这首先得益于使用FAST检测特征点，FAST的检测速度正如它的名字一样是出了名的快。再次是使用BRIEF算法计算描述子，该描述子特有的2进制串的表现形式不仅节约了存储空间，而且大大缩短了匹配的时间。
例如特征点A、B的描述子如下。
A：10101011
B：10101010
我们设定一个阈值，比如80%。当A和B的描述子的相似度大于90%时，我们判断A,B是相同的特征点，即这2个点匹配成功。在这个例子中A,B只有最后一位不同，相似度为87.5%，大于80%。则A和B是匹配的。
我们将A和B进行异或操作就可以轻松计算出A和B的相似度。而异或操作可以借组硬件完成，具有很高的效率，加快了匹配的速度。


```cpp

#define NN_MATCH_RATIO              0.8f
#define MIN_INLIER_COUNT            32
matcher = cv::DescriptorMatcher::create("BruteForce-Hamming");
int matchcnt = 0;
std::vector<std::vector<cv::DMatch>> descriptorMatches;
matcher->knnMatch(referenceDescriptors, descriptor, descriptorMatches, 2);
for (unsigned i = 0; i < descriptorMatches.size(); i++)
{
    if (descriptorMatches[i][0].distance < 
        NN_MATCH_RATIO * descriptorMatches[i][1].distance) matchcnt++;
}
if (matchcnt >= MIN_INLIER_COUNT) {
    state->setText(" key points matched "+std::to_string(matchcnt));
    captrue = true;
}
```

上述代码设定的阈值即80%， 当匹配的特征点个数超过32个的时候， 我们即认为匹配到了之前在相册选中的图片。在引擎里点击pick按钮会选择一张相册里的图，然后不断匹配camera的图像，知道检测到跟旋转的图片匹配的画面，画面定格。再次点击pick，会重新匹配新选组的图片。

运行效果如下:

<center><img src="/img/post-vr/vr11.jpg" /></center><br><br>

参考:

[1] [KNN 邻近算法][i3]
[2] [Image Match][i2]
[3] [iOS内置的api 获取camera内置参数][i3]
[4] [OpenCV中ORB特征提取与匹配][i4]
[5] [OpenCV中ORB的API解释][i5]
[6] [百科中关于 汉明距离的介绍][i6]

[i1]: https://github.com/anandmuralidhar24/SimpleARAndroid
[i2]: http://www.anandmuralidhar.com/blog/android/simple-ar/
[i3]: https://baike.baidu.com/item/%E9%82%BB%E8%BF%91%E7%AE%97%E6%B3%95/1151153?fr=aladdin
[i4]: https://mp.weixin.qq.com/s/S4b1OGjRWX1kktefyHAo8A
[i5]: https://blog.csdn.net/weixin_41284198/article/details/81203577
[i6]: http://cvlabwww.epfl.ch/%7Elepetit/papers/calonder_eccv10.pdf
[i7]: https://baike.baidu.com/item/汉明距离/475174